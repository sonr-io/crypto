// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: crypto/ucan/v1/policy.proto

package ucanv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PolicyStatement with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PolicyStatement) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyStatement with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PolicyStatementMultiError, or nil if none found.
func (m *PolicyStatement) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyStatement) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Statement.(type) {
	case *PolicyStatement_Comparison:
		if v == nil {
			err := PolicyStatementValidationError{
				field:  "Statement",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetComparison()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PolicyStatementValidationError{
						field:  "Comparison",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PolicyStatementValidationError{
						field:  "Comparison",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetComparison()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PolicyStatementValidationError{
					field:  "Comparison",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PolicyStatement_Connective:
		if v == nil {
			err := PolicyStatementValidationError{
				field:  "Statement",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetConnective()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PolicyStatementValidationError{
						field:  "Connective",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PolicyStatementValidationError{
						field:  "Connective",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetConnective()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PolicyStatementValidationError{
					field:  "Connective",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PolicyStatement_Negation:
		if v == nil {
			err := PolicyStatementValidationError{
				field:  "Statement",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetNegation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PolicyStatementValidationError{
						field:  "Negation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PolicyStatementValidationError{
						field:  "Negation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNegation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PolicyStatementValidationError{
					field:  "Negation",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PolicyStatement_Quantifier:
		if v == nil {
			err := PolicyStatementValidationError{
				field:  "Statement",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetQuantifier()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PolicyStatementValidationError{
						field:  "Quantifier",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PolicyStatementValidationError{
						field:  "Quantifier",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQuantifier()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PolicyStatementValidationError{
					field:  "Quantifier",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PolicyStatement_Pattern:
		if v == nil {
			err := PolicyStatementValidationError{
				field:  "Statement",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPattern()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PolicyStatementValidationError{
						field:  "Pattern",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PolicyStatementValidationError{
						field:  "Pattern",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPattern()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PolicyStatementValidationError{
					field:  "Pattern",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return PolicyStatementMultiError(errors)
	}

	return nil
}

// PolicyStatementMultiError is an error wrapping multiple validation errors
// returned by PolicyStatement.ValidateAll() if the designated constraints
// aren't met.
type PolicyStatementMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyStatementMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyStatementMultiError) AllErrors() []error { return m }

// PolicyStatementValidationError is the validation error returned by
// PolicyStatement.Validate if the designated constraints aren't met.
type PolicyStatementValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyStatementValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyStatementValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyStatementValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyStatementValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyStatementValidationError) ErrorName() string { return "PolicyStatementValidationError" }

// Error satisfies the builtin error interface
func (e PolicyStatementValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyStatement.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyStatementValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyStatementValidationError{}

// Validate checks the field values on ComparisonStatement with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ComparisonStatement) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ComparisonStatement with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ComparisonStatementMultiError, or nil if none found.
func (m *ComparisonStatement) ValidateAll() error {
	return m.validate(true)
}

func (m *ComparisonStatement) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Operator

	// no validation rules for Selector

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ComparisonStatementValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ComparisonStatementValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComparisonStatementValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ComparisonStatementMultiError(errors)
	}

	return nil
}

// ComparisonStatementMultiError is an error wrapping multiple validation
// errors returned by ComparisonStatement.ValidateAll() if the designated
// constraints aren't met.
type ComparisonStatementMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ComparisonStatementMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ComparisonStatementMultiError) AllErrors() []error { return m }

// ComparisonStatementValidationError is the validation error returned by
// ComparisonStatement.Validate if the designated constraints aren't met.
type ComparisonStatementValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComparisonStatementValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComparisonStatementValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComparisonStatementValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComparisonStatementValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComparisonStatementValidationError) ErrorName() string {
	return "ComparisonStatementValidationError"
}

// Error satisfies the builtin error interface
func (e ComparisonStatementValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComparisonStatement.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComparisonStatementValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComparisonStatementValidationError{}

// Validate checks the field values on ConnectiveStatement with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConnectiveStatement) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectiveStatement with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConnectiveStatementMultiError, or nil if none found.
func (m *ConnectiveStatement) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectiveStatement) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Operator

	for idx, item := range m.GetStatements() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConnectiveStatementValidationError{
						field:  fmt.Sprintf("Statements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConnectiveStatementValidationError{
						field:  fmt.Sprintf("Statements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConnectiveStatementValidationError{
					field:  fmt.Sprintf("Statements[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConnectiveStatementMultiError(errors)
	}

	return nil
}

// ConnectiveStatementMultiError is an error wrapping multiple validation
// errors returned by ConnectiveStatement.ValidateAll() if the designated
// constraints aren't met.
type ConnectiveStatementMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectiveStatementMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectiveStatementMultiError) AllErrors() []error { return m }

// ConnectiveStatementValidationError is the validation error returned by
// ConnectiveStatement.Validate if the designated constraints aren't met.
type ConnectiveStatementValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectiveStatementValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectiveStatementValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectiveStatementValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectiveStatementValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectiveStatementValidationError) ErrorName() string {
	return "ConnectiveStatementValidationError"
}

// Error satisfies the builtin error interface
func (e ConnectiveStatementValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectiveStatement.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectiveStatementValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectiveStatementValidationError{}

// Validate checks the field values on NegationStatement with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NegationStatement) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NegationStatement with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NegationStatementMultiError, or nil if none found.
func (m *NegationStatement) ValidateAll() error {
	return m.validate(true)
}

func (m *NegationStatement) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatement()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NegationStatementValidationError{
					field:  "Statement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NegationStatementValidationError{
					field:  "Statement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NegationStatementValidationError{
				field:  "Statement",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NegationStatementMultiError(errors)
	}

	return nil
}

// NegationStatementMultiError is an error wrapping multiple validation errors
// returned by NegationStatement.ValidateAll() if the designated constraints
// aren't met.
type NegationStatementMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NegationStatementMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NegationStatementMultiError) AllErrors() []error { return m }

// NegationStatementValidationError is the validation error returned by
// NegationStatement.Validate if the designated constraints aren't met.
type NegationStatementValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NegationStatementValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NegationStatementValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NegationStatementValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NegationStatementValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NegationStatementValidationError) ErrorName() string {
	return "NegationStatementValidationError"
}

// Error satisfies the builtin error interface
func (e NegationStatementValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNegationStatement.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NegationStatementValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NegationStatementValidationError{}

// Validate checks the field values on QuantifierStatement with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuantifierStatement) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuantifierStatement with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuantifierStatementMultiError, or nil if none found.
func (m *QuantifierStatement) ValidateAll() error {
	return m.validate(true)
}

func (m *QuantifierStatement) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Operator

	// no validation rules for Selector

	if all {
		switch v := interface{}(m.GetStatement()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuantifierStatementValidationError{
					field:  "Statement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuantifierStatementValidationError{
					field:  "Statement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuantifierStatementValidationError{
				field:  "Statement",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QuantifierStatementMultiError(errors)
	}

	return nil
}

// QuantifierStatementMultiError is an error wrapping multiple validation
// errors returned by QuantifierStatement.ValidateAll() if the designated
// constraints aren't met.
type QuantifierStatementMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuantifierStatementMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuantifierStatementMultiError) AllErrors() []error { return m }

// QuantifierStatementValidationError is the validation error returned by
// QuantifierStatement.Validate if the designated constraints aren't met.
type QuantifierStatementValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuantifierStatementValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuantifierStatementValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuantifierStatementValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuantifierStatementValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuantifierStatementValidationError) ErrorName() string {
	return "QuantifierStatementValidationError"
}

// Error satisfies the builtin error interface
func (e QuantifierStatementValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuantifierStatement.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuantifierStatementValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuantifierStatementValidationError{}

// Validate checks the field values on PatternStatement with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PatternStatement) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatternStatement with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatternStatementMultiError, or nil if none found.
func (m *PatternStatement) ValidateAll() error {
	return m.validate(true)
}

func (m *PatternStatement) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Operator

	// no validation rules for Selector

	// no validation rules for Pattern

	if len(errors) > 0 {
		return PatternStatementMultiError(errors)
	}

	return nil
}

// PatternStatementMultiError is an error wrapping multiple validation errors
// returned by PatternStatement.ValidateAll() if the designated constraints
// aren't met.
type PatternStatementMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatternStatementMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatternStatementMultiError) AllErrors() []error { return m }

// PatternStatementValidationError is the validation error returned by
// PatternStatement.Validate if the designated constraints aren't met.
type PatternStatementValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatternStatementValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatternStatementValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatternStatementValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatternStatementValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatternStatementValidationError) ErrorName() string { return "PatternStatementValidationError" }

// Error satisfies the builtin error interface
func (e PatternStatementValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatternStatement.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatternStatementValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatternStatementValidationError{}
