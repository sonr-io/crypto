// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: crypto/ucan/v1/capability.proto

package ucanv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Resource with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceMultiError, or nil
// if none found.
func (m *Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Kind

	// no validation rules for Id

	// no validation rules for Properties

	if len(errors) > 0 {
		return ResourceMultiError(errors)
	}

	return nil
}

// ResourceMultiError is an error wrapping multiple validation errors returned
// by Resource.ValidateAll() if the designated constraints aren't met.
type ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceMultiError) AllErrors() []error { return m }

// ResourceValidationError is the validation error returned by
// Resource.Validate if the designated constraints aren't met.
type ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceValidationError) ErrorName() string { return "ResourceValidationError" }

// Error satisfies the builtin error interface
func (e ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceValidationError{}

// Validate checks the field values on Capability with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Capability) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Capability with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CapabilityMultiError, or
// nil if none found.
func (m *Capability) ValidateAll() error {
	return m.validate(true)
}

func (m *Capability) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Parent

	// no validation rules for Description

	// no validation rules for Command

	if len(errors) > 0 {
		return CapabilityMultiError(errors)
	}

	return nil
}

// CapabilityMultiError is an error wrapping multiple validation errors
// returned by Capability.ValidateAll() if the designated constraints aren't met.
type CapabilityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CapabilityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CapabilityMultiError) AllErrors() []error { return m }

// CapabilityValidationError is the validation error returned by
// Capability.Validate if the designated constraints aren't met.
type CapabilityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CapabilityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CapabilityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CapabilityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CapabilityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CapabilityValidationError) ErrorName() string { return "CapabilityValidationError" }

// Error satisfies the builtin error interface
func (e CapabilityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCapability.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CapabilityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CapabilityValidationError{}

// Validate checks the field values on CapabilityAttenuation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CapabilityAttenuation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CapabilityAttenuation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CapabilityAttenuationMultiError, or nil if none found.
func (m *CapabilityAttenuation) ValidateAll() error {
	return m.validate(true)
}

func (m *CapabilityAttenuation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CapabilityAttenuationValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CapabilityAttenuationValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CapabilityAttenuationValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCapability()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CapabilityAttenuationValidationError{
					field:  "Capability",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CapabilityAttenuationValidationError{
					field:  "Capability",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCapability()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CapabilityAttenuationValidationError{
				field:  "Capability",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetConstraints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CapabilityAttenuationValidationError{
						field:  fmt.Sprintf("Constraints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CapabilityAttenuationValidationError{
						field:  fmt.Sprintf("Constraints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CapabilityAttenuationValidationError{
					field:  fmt.Sprintf("Constraints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CapabilityAttenuationMultiError(errors)
	}

	return nil
}

// CapabilityAttenuationMultiError is an error wrapping multiple validation
// errors returned by CapabilityAttenuation.ValidateAll() if the designated
// constraints aren't met.
type CapabilityAttenuationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CapabilityAttenuationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CapabilityAttenuationMultiError) AllErrors() []error { return m }

// CapabilityAttenuationValidationError is the validation error returned by
// CapabilityAttenuation.Validate if the designated constraints aren't met.
type CapabilityAttenuationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CapabilityAttenuationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CapabilityAttenuationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CapabilityAttenuationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CapabilityAttenuationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CapabilityAttenuationValidationError) ErrorName() string {
	return "CapabilityAttenuationValidationError"
}

// Error satisfies the builtin error interface
func (e CapabilityAttenuationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCapabilityAttenuation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CapabilityAttenuationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CapabilityAttenuationValidationError{}

// Validate checks the field values on CapabilityHierarchy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CapabilityHierarchy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CapabilityHierarchy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CapabilityHierarchyMultiError, or nil if none found.
func (m *CapabilityHierarchy) ValidateAll() error {
	return m.validate(true)
}

func (m *CapabilityHierarchy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetRoot()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CapabilityHierarchyValidationError{
					field:  "Root",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CapabilityHierarchyValidationError{
					field:  "Root",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CapabilityHierarchyValidationError{
				field:  "Root",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetCapabilities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CapabilityHierarchyValidationError{
						field:  fmt.Sprintf("Capabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CapabilityHierarchyValidationError{
						field:  fmt.Sprintf("Capabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CapabilityHierarchyValidationError{
					field:  fmt.Sprintf("Capabilities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CapabilityHierarchyMultiError(errors)
	}

	return nil
}

// CapabilityHierarchyMultiError is an error wrapping multiple validation
// errors returned by CapabilityHierarchy.ValidateAll() if the designated
// constraints aren't met.
type CapabilityHierarchyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CapabilityHierarchyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CapabilityHierarchyMultiError) AllErrors() []error { return m }

// CapabilityHierarchyValidationError is the validation error returned by
// CapabilityHierarchy.Validate if the designated constraints aren't met.
type CapabilityHierarchyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CapabilityHierarchyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CapabilityHierarchyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CapabilityHierarchyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CapabilityHierarchyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CapabilityHierarchyValidationError) ErrorName() string {
	return "CapabilityHierarchyValidationError"
}

// Error satisfies the builtin error interface
func (e CapabilityHierarchyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCapabilityHierarchy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CapabilityHierarchyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CapabilityHierarchyValidationError{}

// Validate checks the field values on VaultCapabilities with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VaultCapabilities) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VaultCapabilities with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VaultCapabilitiesMultiError, or nil if none found.
func (m *VaultCapabilities) ValidateAll() error {
	return m.validate(true)
}

func (m *VaultCapabilities) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCapabilities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, VaultCapabilitiesValidationError{
						field:  fmt.Sprintf("Capabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, VaultCapabilitiesValidationError{
						field:  fmt.Sprintf("Capabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VaultCapabilitiesValidationError{
					field:  fmt.Sprintf("Capabilities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDefaultAttenuations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, VaultCapabilitiesValidationError{
						field:  fmt.Sprintf("DefaultAttenuations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, VaultCapabilitiesValidationError{
						field:  fmt.Sprintf("DefaultAttenuations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VaultCapabilitiesValidationError{
					field:  fmt.Sprintf("DefaultAttenuations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return VaultCapabilitiesMultiError(errors)
	}

	return nil
}

// VaultCapabilitiesMultiError is an error wrapping multiple validation errors
// returned by VaultCapabilities.ValidateAll() if the designated constraints
// aren't met.
type VaultCapabilitiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VaultCapabilitiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VaultCapabilitiesMultiError) AllErrors() []error { return m }

// VaultCapabilitiesValidationError is the validation error returned by
// VaultCapabilities.Validate if the designated constraints aren't met.
type VaultCapabilitiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VaultCapabilitiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VaultCapabilitiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VaultCapabilitiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VaultCapabilitiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VaultCapabilitiesValidationError) ErrorName() string {
	return "VaultCapabilitiesValidationError"
}

// Error satisfies the builtin error interface
func (e VaultCapabilitiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVaultCapabilities.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VaultCapabilitiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VaultCapabilitiesValidationError{}

// Validate checks the field values on AccountCapabilities with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountCapabilities) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountCapabilities with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountCapabilitiesMultiError, or nil if none found.
func (m *AccountCapabilities) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountCapabilities) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCapabilities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AccountCapabilitiesValidationError{
						field:  fmt.Sprintf("Capabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AccountCapabilitiesValidationError{
						field:  fmt.Sprintf("Capabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AccountCapabilitiesValidationError{
					field:  fmt.Sprintf("Capabilities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDefaultAttenuations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AccountCapabilitiesValidationError{
						field:  fmt.Sprintf("DefaultAttenuations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AccountCapabilitiesValidationError{
						field:  fmt.Sprintf("DefaultAttenuations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AccountCapabilitiesValidationError{
					field:  fmt.Sprintf("DefaultAttenuations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AccountCapabilitiesMultiError(errors)
	}

	return nil
}

// AccountCapabilitiesMultiError is an error wrapping multiple validation
// errors returned by AccountCapabilities.ValidateAll() if the designated
// constraints aren't met.
type AccountCapabilitiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountCapabilitiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountCapabilitiesMultiError) AllErrors() []error { return m }

// AccountCapabilitiesValidationError is the validation error returned by
// AccountCapabilities.Validate if the designated constraints aren't met.
type AccountCapabilitiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountCapabilitiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountCapabilitiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountCapabilitiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountCapabilitiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountCapabilitiesValidationError) ErrorName() string {
	return "AccountCapabilitiesValidationError"
}

// Error satisfies the builtin error interface
func (e AccountCapabilitiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountCapabilities.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountCapabilitiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountCapabilitiesValidationError{}

// Validate checks the field values on ServiceCapabilities with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServiceCapabilities) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceCapabilities with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceCapabilitiesMultiError, or nil if none found.
func (m *ServiceCapabilities) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceCapabilities) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCapabilities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServiceCapabilitiesValidationError{
						field:  fmt.Sprintf("Capabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServiceCapabilitiesValidationError{
						field:  fmt.Sprintf("Capabilities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceCapabilitiesValidationError{
					field:  fmt.Sprintf("Capabilities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDefaultAttenuations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServiceCapabilitiesValidationError{
						field:  fmt.Sprintf("DefaultAttenuations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServiceCapabilitiesValidationError{
						field:  fmt.Sprintf("DefaultAttenuations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceCapabilitiesValidationError{
					field:  fmt.Sprintf("DefaultAttenuations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ServiceCapabilitiesMultiError(errors)
	}

	return nil
}

// ServiceCapabilitiesMultiError is an error wrapping multiple validation
// errors returned by ServiceCapabilities.ValidateAll() if the designated
// constraints aren't met.
type ServiceCapabilitiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceCapabilitiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceCapabilitiesMultiError) AllErrors() []error { return m }

// ServiceCapabilitiesValidationError is the validation error returned by
// ServiceCapabilities.Validate if the designated constraints aren't met.
type ServiceCapabilitiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceCapabilitiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceCapabilitiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceCapabilitiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceCapabilitiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceCapabilitiesValidationError) ErrorName() string {
	return "ServiceCapabilitiesValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceCapabilitiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceCapabilities.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceCapabilitiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceCapabilitiesValidationError{}
