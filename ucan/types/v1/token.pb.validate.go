// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: crypto/ucan/v1/token.proto

package ucanv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Token with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Token) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Token with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TokenMultiError, or nil if none found.
func (m *Token) ValidateAll() error {
	return m.validate(true)
}

func (m *Token) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Signature

	if all {
		switch v := interface{}(m.GetPayload()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TokenValidationError{
					field:  "Payload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TokenValidationError{
					field:  "Payload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TokenValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TokenMultiError(errors)
	}

	return nil
}

// TokenMultiError is an error wrapping multiple validation errors returned by
// Token.ValidateAll() if the designated constraints aren't met.
type TokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenMultiError) AllErrors() []error { return m }

// TokenValidationError is the validation error returned by Token.Validate if
// the designated constraints aren't met.
type TokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenValidationError) ErrorName() string { return "TokenValidationError" }

// Error satisfies the builtin error interface
func (e TokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenValidationError{}

// Validate checks the field values on TokenPayload with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TokenPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenPayload with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TokenPayloadMultiError, or
// nil if none found.
func (m *TokenPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TokenPayloadValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TokenPayloadValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TokenPayloadValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Content.(type) {
	case *TokenPayload_Delegation:
		if v == nil {
			err := TokenPayloadValidationError{
				field:  "Content",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Delegation
	case *TokenPayload_Invocation:
		if v == nil {
			err := TokenPayloadValidationError{
				field:  "Content",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Invocation
	case *TokenPayload_Receipt:
		if v == nil {
			err := TokenPayloadValidationError{
				field:  "Content",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Receipt
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return TokenPayloadMultiError(errors)
	}

	return nil
}

// TokenPayloadMultiError is an error wrapping multiple validation errors
// returned by TokenPayload.ValidateAll() if the designated constraints aren't met.
type TokenPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenPayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenPayloadMultiError) AllErrors() []error { return m }

// TokenPayloadValidationError is the validation error returned by
// TokenPayload.Validate if the designated constraints aren't met.
type TokenPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenPayloadValidationError) ErrorName() string { return "TokenPayloadValidationError" }

// Error satisfies the builtin error interface
func (e TokenPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenPayloadValidationError{}

// Validate checks the field values on TokenHeader with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TokenHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenHeader with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TokenHeaderMultiError, or
// nil if none found.
func (m *TokenHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for Algorithm

	if len(errors) > 0 {
		return TokenHeaderMultiError(errors)
	}

	return nil
}

// TokenHeaderMultiError is an error wrapping multiple validation errors
// returned by TokenHeader.ValidateAll() if the designated constraints aren't met.
type TokenHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenHeaderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenHeaderMultiError) AllErrors() []error { return m }

// TokenHeaderValidationError is the validation error returned by
// TokenHeader.Validate if the designated constraints aren't met.
type TokenHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenHeaderValidationError) ErrorName() string { return "TokenHeaderValidationError" }

// Error satisfies the builtin error interface
func (e TokenHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenHeaderValidationError{}

// Validate checks the field values on Proof with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Proof) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Proof with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProofMultiError, or nil if none found.
func (m *Proof) ValidateAll() error {
	return m.validate(true)
}

func (m *Proof) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Proof.(type) {
	case *Proof_Cid:
		if v == nil {
			err := ProofValidationError{
				field:  "Proof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Cid
	case *Proof_Token:
		if v == nil {
			err := ProofValidationError{
				field:  "Proof",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetToken()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProofValidationError{
						field:  "Token",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProofValidationError{
						field:  "Token",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetToken()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProofValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ProofMultiError(errors)
	}

	return nil
}

// ProofMultiError is an error wrapping multiple validation errors returned by
// Proof.ValidateAll() if the designated constraints aren't met.
type ProofMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProofMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProofMultiError) AllErrors() []error { return m }

// ProofValidationError is the validation error returned by Proof.Validate if
// the designated constraints aren't met.
type ProofValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProofValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProofValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProofValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProofValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProofValidationError) ErrorName() string { return "ProofValidationError" }

// Error satisfies the builtin error interface
func (e ProofValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProof.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProofValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProofValidationError{}
