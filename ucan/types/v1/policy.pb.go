// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: crypto/ucan/v1/policy.proto

package ucanv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ComparisonOperator represents available comparison operations
type ComparisonOperator int32

const (
	// Unknown operator
	ComparisonOperator_COMPARISON_OPERATOR_UNSPECIFIED ComparisonOperator = 0
	// Equal (==)
	ComparisonOperator_COMPARISON_OPERATOR_EQUAL ComparisonOperator = 1
	// Not equal (!=)
	ComparisonOperator_COMPARISON_OPERATOR_NOT_EQUAL ComparisonOperator = 2
	// Greater than (>)
	ComparisonOperator_COMPARISON_OPERATOR_GREATER_THAN ComparisonOperator = 3
	// Greater than or equal (>=)
	ComparisonOperator_COMPARISON_OPERATOR_GREATER_THAN_OR_EQUAL ComparisonOperator = 4
	// Less than (<)
	ComparisonOperator_COMPARISON_OPERATOR_LESS_THAN ComparisonOperator = 5
	// Less than or equal (<=)
	ComparisonOperator_COMPARISON_OPERATOR_LESS_THAN_OR_EQUAL ComparisonOperator = 6
)

// Enum value maps for ComparisonOperator.
var (
	ComparisonOperator_name = map[int32]string{
		0: "COMPARISON_OPERATOR_UNSPECIFIED",
		1: "COMPARISON_OPERATOR_EQUAL",
		2: "COMPARISON_OPERATOR_NOT_EQUAL",
		3: "COMPARISON_OPERATOR_GREATER_THAN",
		4: "COMPARISON_OPERATOR_GREATER_THAN_OR_EQUAL",
		5: "COMPARISON_OPERATOR_LESS_THAN",
		6: "COMPARISON_OPERATOR_LESS_THAN_OR_EQUAL",
	}
	ComparisonOperator_value = map[string]int32{
		"COMPARISON_OPERATOR_UNSPECIFIED":           0,
		"COMPARISON_OPERATOR_EQUAL":                 1,
		"COMPARISON_OPERATOR_NOT_EQUAL":             2,
		"COMPARISON_OPERATOR_GREATER_THAN":          3,
		"COMPARISON_OPERATOR_GREATER_THAN_OR_EQUAL": 4,
		"COMPARISON_OPERATOR_LESS_THAN":             5,
		"COMPARISON_OPERATOR_LESS_THAN_OR_EQUAL":    6,
	}
)

func (x ComparisonOperator) Enum() *ComparisonOperator {
	p := new(ComparisonOperator)
	*p = x
	return p
}

func (x ComparisonOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComparisonOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_crypto_ucan_v1_policy_proto_enumTypes[0].Descriptor()
}

func (ComparisonOperator) Type() protoreflect.EnumType {
	return &file_crypto_ucan_v1_policy_proto_enumTypes[0]
}

func (x ComparisonOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComparisonOperator.Descriptor instead.
func (ComparisonOperator) EnumDescriptor() ([]byte, []int) {
	return file_crypto_ucan_v1_policy_proto_rawDescGZIP(), []int{0}
}

// ConnectiveOperator represents available logical connectives
type ConnectiveOperator int32

const (
	// Unknown operator
	ConnectiveOperator_CONNECTIVE_OPERATOR_UNSPECIFIED ConnectiveOperator = 0
	// Logical AND
	ConnectiveOperator_CONNECTIVE_OPERATOR_AND ConnectiveOperator = 1
	// Logical OR
	ConnectiveOperator_CONNECTIVE_OPERATOR_OR ConnectiveOperator = 2
)

// Enum value maps for ConnectiveOperator.
var (
	ConnectiveOperator_name = map[int32]string{
		0: "CONNECTIVE_OPERATOR_UNSPECIFIED",
		1: "CONNECTIVE_OPERATOR_AND",
		2: "CONNECTIVE_OPERATOR_OR",
	}
	ConnectiveOperator_value = map[string]int32{
		"CONNECTIVE_OPERATOR_UNSPECIFIED": 0,
		"CONNECTIVE_OPERATOR_AND":         1,
		"CONNECTIVE_OPERATOR_OR":          2,
	}
)

func (x ConnectiveOperator) Enum() *ConnectiveOperator {
	p := new(ConnectiveOperator)
	*p = x
	return p
}

func (x ConnectiveOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectiveOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_crypto_ucan_v1_policy_proto_enumTypes[1].Descriptor()
}

func (ConnectiveOperator) Type() protoreflect.EnumType {
	return &file_crypto_ucan_v1_policy_proto_enumTypes[1]
}

func (x ConnectiveOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectiveOperator.Descriptor instead.
func (ConnectiveOperator) EnumDescriptor() ([]byte, []int) {
	return file_crypto_ucan_v1_policy_proto_rawDescGZIP(), []int{1}
}

// QuantifierOperator represents available quantifiers
type QuantifierOperator int32

const (
	// Unknown operator
	QuantifierOperator_QUANTIFIER_OPERATOR_UNSPECIFIED QuantifierOperator = 0
	// Universal quantifier (all)
	QuantifierOperator_QUANTIFIER_OPERATOR_ALL QuantifierOperator = 1
	// Existential quantifier (any)
	QuantifierOperator_QUANTIFIER_OPERATOR_ANY QuantifierOperator = 2
)

// Enum value maps for QuantifierOperator.
var (
	QuantifierOperator_name = map[int32]string{
		0: "QUANTIFIER_OPERATOR_UNSPECIFIED",
		1: "QUANTIFIER_OPERATOR_ALL",
		2: "QUANTIFIER_OPERATOR_ANY",
	}
	QuantifierOperator_value = map[string]int32{
		"QUANTIFIER_OPERATOR_UNSPECIFIED": 0,
		"QUANTIFIER_OPERATOR_ALL":         1,
		"QUANTIFIER_OPERATOR_ANY":         2,
	}
)

func (x QuantifierOperator) Enum() *QuantifierOperator {
	p := new(QuantifierOperator)
	*p = x
	return p
}

func (x QuantifierOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuantifierOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_crypto_ucan_v1_policy_proto_enumTypes[2].Descriptor()
}

func (QuantifierOperator) Type() protoreflect.EnumType {
	return &file_crypto_ucan_v1_policy_proto_enumTypes[2]
}

func (x QuantifierOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuantifierOperator.Descriptor instead.
func (QuantifierOperator) EnumDescriptor() ([]byte, []int) {
	return file_crypto_ucan_v1_policy_proto_rawDescGZIP(), []int{2}
}

// PatternOperator represents available pattern matching operations
type PatternOperator int32

const (
	// Unknown operator
	PatternOperator_PATTERN_OPERATOR_UNSPECIFIED PatternOperator = 0
	// Glob pattern matching (like)
	PatternOperator_PATTERN_OPERATOR_LIKE PatternOperator = 1
)

// Enum value maps for PatternOperator.
var (
	PatternOperator_name = map[int32]string{
		0: "PATTERN_OPERATOR_UNSPECIFIED",
		1: "PATTERN_OPERATOR_LIKE",
	}
	PatternOperator_value = map[string]int32{
		"PATTERN_OPERATOR_UNSPECIFIED": 0,
		"PATTERN_OPERATOR_LIKE":        1,
	}
)

func (x PatternOperator) Enum() *PatternOperator {
	p := new(PatternOperator)
	*p = x
	return p
}

func (x PatternOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_crypto_ucan_v1_policy_proto_enumTypes[3].Descriptor()
}

func (PatternOperator) Type() protoreflect.EnumType {
	return &file_crypto_ucan_v1_policy_proto_enumTypes[3]
}

func (x PatternOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternOperator.Descriptor instead.
func (PatternOperator) EnumDescriptor() ([]byte, []int) {
	return file_crypto_ucan_v1_policy_proto_rawDescGZIP(), []int{3}
}

// PolicyStatement represents a constraint on invocation arguments
type PolicyStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Statement:
	//
	//	*PolicyStatement_Comparison
	//	*PolicyStatement_Connective
	//	*PolicyStatement_Negation
	//	*PolicyStatement_Quantifier
	//	*PolicyStatement_Pattern
	Statement isPolicyStatement_Statement `protobuf_oneof:"statement"`
}

func (x *PolicyStatement) Reset() {
	*x = PolicyStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_ucan_v1_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyStatement) ProtoMessage() {}

func (x *PolicyStatement) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_ucan_v1_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyStatement.ProtoReflect.Descriptor instead.
func (*PolicyStatement) Descriptor() ([]byte, []int) {
	return file_crypto_ucan_v1_policy_proto_rawDescGZIP(), []int{0}
}

func (m *PolicyStatement) GetStatement() isPolicyStatement_Statement {
	if m != nil {
		return m.Statement
	}
	return nil
}

func (x *PolicyStatement) GetComparison() *ComparisonStatement {
	if x, ok := x.GetStatement().(*PolicyStatement_Comparison); ok {
		return x.Comparison
	}
	return nil
}

func (x *PolicyStatement) GetConnective() *ConnectiveStatement {
	if x, ok := x.GetStatement().(*PolicyStatement_Connective); ok {
		return x.Connective
	}
	return nil
}

func (x *PolicyStatement) GetNegation() *NegationStatement {
	if x, ok := x.GetStatement().(*PolicyStatement_Negation); ok {
		return x.Negation
	}
	return nil
}

func (x *PolicyStatement) GetQuantifier() *QuantifierStatement {
	if x, ok := x.GetStatement().(*PolicyStatement_Quantifier); ok {
		return x.Quantifier
	}
	return nil
}

func (x *PolicyStatement) GetPattern() *PatternStatement {
	if x, ok := x.GetStatement().(*PolicyStatement_Pattern); ok {
		return x.Pattern
	}
	return nil
}

type isPolicyStatement_Statement interface {
	isPolicyStatement_Statement()
}

type PolicyStatement_Comparison struct {
	// Comparison statement
	Comparison *ComparisonStatement `protobuf:"bytes,1,opt,name=comparison,proto3,oneof"`
}

type PolicyStatement_Connective struct {
	// Connective statement (and, or)
	Connective *ConnectiveStatement `protobuf:"bytes,2,opt,name=connective,proto3,oneof"`
}

type PolicyStatement_Negation struct {
	// Negation statement (not)
	Negation *NegationStatement `protobuf:"bytes,3,opt,name=negation,proto3,oneof"`
}

type PolicyStatement_Quantifier struct {
	// Quantifier statement (all, any)
	Quantifier *QuantifierStatement `protobuf:"bytes,4,opt,name=quantifier,proto3,oneof"`
}

type PolicyStatement_Pattern struct {
	// Pattern matching statement
	Pattern *PatternStatement `protobuf:"bytes,5,opt,name=pattern,proto3,oneof"`
}

func (*PolicyStatement_Comparison) isPolicyStatement_Statement() {}

func (*PolicyStatement_Connective) isPolicyStatement_Statement() {}

func (*PolicyStatement_Negation) isPolicyStatement_Statement() {}

func (*PolicyStatement_Quantifier) isPolicyStatement_Statement() {}

func (*PolicyStatement_Pattern) isPolicyStatement_Statement() {}

// ComparisonStatement represents comparison operations
type ComparisonStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of comparison
	Operator ComparisonOperator `protobuf:"varint,1,opt,name=operator,proto3,enum=crypto.ucan.v1.ComparisonOperator" json:"operator,omitempty"`
	// Selector for the value to compare (jq-like path)
	Selector string `protobuf:"bytes,2,opt,name=selector,proto3" json:"selector,omitempty"`
	// Value to compare against
	Value *structpb.Value `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ComparisonStatement) Reset() {
	*x = ComparisonStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_ucan_v1_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComparisonStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComparisonStatement) ProtoMessage() {}

func (x *ComparisonStatement) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_ucan_v1_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComparisonStatement.ProtoReflect.Descriptor instead.
func (*ComparisonStatement) Descriptor() ([]byte, []int) {
	return file_crypto_ucan_v1_policy_proto_rawDescGZIP(), []int{1}
}

func (x *ComparisonStatement) GetOperator() ComparisonOperator {
	if x != nil {
		return x.Operator
	}
	return ComparisonOperator_COMPARISON_OPERATOR_UNSPECIFIED
}

func (x *ComparisonStatement) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

func (x *ComparisonStatement) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// ConnectiveStatement represents logical connectives
type ConnectiveStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of connective
	Operator ConnectiveOperator `protobuf:"varint,1,opt,name=operator,proto3,enum=crypto.ucan.v1.ConnectiveOperator" json:"operator,omitempty"`
	// Statements to connect
	Statements []*PolicyStatement `protobuf:"bytes,2,rep,name=statements,proto3" json:"statements,omitempty"`
}

func (x *ConnectiveStatement) Reset() {
	*x = ConnectiveStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_ucan_v1_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectiveStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectiveStatement) ProtoMessage() {}

func (x *ConnectiveStatement) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_ucan_v1_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectiveStatement.ProtoReflect.Descriptor instead.
func (*ConnectiveStatement) Descriptor() ([]byte, []int) {
	return file_crypto_ucan_v1_policy_proto_rawDescGZIP(), []int{2}
}

func (x *ConnectiveStatement) GetOperator() ConnectiveOperator {
	if x != nil {
		return x.Operator
	}
	return ConnectiveOperator_CONNECTIVE_OPERATOR_UNSPECIFIED
}

func (x *ConnectiveStatement) GetStatements() []*PolicyStatement {
	if x != nil {
		return x.Statements
	}
	return nil
}

// NegationStatement represents logical negation
type NegationStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Statement to negate
	Statement *PolicyStatement `protobuf:"bytes,1,opt,name=statement,proto3" json:"statement,omitempty"`
}

func (x *NegationStatement) Reset() {
	*x = NegationStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_ucan_v1_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NegationStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NegationStatement) ProtoMessage() {}

func (x *NegationStatement) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_ucan_v1_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NegationStatement.ProtoReflect.Descriptor instead.
func (*NegationStatement) Descriptor() ([]byte, []int) {
	return file_crypto_ucan_v1_policy_proto_rawDescGZIP(), []int{3}
}

func (x *NegationStatement) GetStatement() *PolicyStatement {
	if x != nil {
		return x.Statement
	}
	return nil
}

// QuantifierStatement represents quantification over collections
type QuantifierStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of quantifier
	Operator QuantifierOperator `protobuf:"varint,1,opt,name=operator,proto3,enum=crypto.ucan.v1.QuantifierOperator" json:"operator,omitempty"`
	// Selector for the collection to quantify over
	Selector string `protobuf:"bytes,2,opt,name=selector,proto3" json:"selector,omitempty"`
	// Statement to apply to each item
	Statement *PolicyStatement `protobuf:"bytes,3,opt,name=statement,proto3" json:"statement,omitempty"`
}

func (x *QuantifierStatement) Reset() {
	*x = QuantifierStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_ucan_v1_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuantifierStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuantifierStatement) ProtoMessage() {}

func (x *QuantifierStatement) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_ucan_v1_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuantifierStatement.ProtoReflect.Descriptor instead.
func (*QuantifierStatement) Descriptor() ([]byte, []int) {
	return file_crypto_ucan_v1_policy_proto_rawDescGZIP(), []int{4}
}

func (x *QuantifierStatement) GetOperator() QuantifierOperator {
	if x != nil {
		return x.Operator
	}
	return QuantifierOperator_QUANTIFIER_OPERATOR_UNSPECIFIED
}

func (x *QuantifierStatement) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

func (x *QuantifierStatement) GetStatement() *PolicyStatement {
	if x != nil {
		return x.Statement
	}
	return nil
}

// PatternStatement represents pattern matching operations
type PatternStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of pattern matching
	Operator PatternOperator `protobuf:"varint,1,opt,name=operator,proto3,enum=crypto.ucan.v1.PatternOperator" json:"operator,omitempty"`
	// Selector for the value to match
	Selector string `protobuf:"bytes,2,opt,name=selector,proto3" json:"selector,omitempty"`
	// Pattern to match against
	Pattern string `protobuf:"bytes,3,opt,name=pattern,proto3" json:"pattern,omitempty"`
}

func (x *PatternStatement) Reset() {
	*x = PatternStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_ucan_v1_policy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternStatement) ProtoMessage() {}

func (x *PatternStatement) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_ucan_v1_policy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternStatement.ProtoReflect.Descriptor instead.
func (*PatternStatement) Descriptor() ([]byte, []int) {
	return file_crypto_ucan_v1_policy_proto_rawDescGZIP(), []int{5}
}

func (x *PatternStatement) GetOperator() PatternOperator {
	if x != nil {
		return x.Operator
	}
	return PatternOperator_PATTERN_OPERATOR_UNSPECIFIED
}

func (x *PatternStatement) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

func (x *PatternStatement) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

var File_crypto_ucan_v1_policy_proto protoreflect.FileDescriptor

var file_crypto_ucan_v1_policy_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x75, 0x63, 0x61, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x75, 0x63, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf2, 0x02, 0x0a, 0x0f,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x45, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x75, 0x63, 0x61,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x75, 0x63, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a,
	0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x75, 0x63, 0x61, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x0a, 0x0a, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x75, 0x63, 0x61, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x75, 0x63, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x9f, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x75, 0x63, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x75, 0x63, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x75, 0x63, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x52, 0x0a, 0x11, 0x4e,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x3d, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x75, 0x63, 0x61,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0xb0, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x75, 0x63, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x75, 0x63, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x10, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x75, 0x63, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2a, 0x9f, 0x02, 0x0a, 0x12, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52,
	0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x51,
	0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49,
	0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4d, 0x50,
	0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x2d,
	0x0a, 0x29, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48,
	0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x21, 0x0a,
	0x1d, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x05,
	0x12, 0x2a, 0x0a, 0x26, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41,
	0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x06, 0x2a, 0x72, 0x0a, 0x12,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41,
	0x4e, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x10, 0x02,
	0x2a, 0x73, 0x0a, 0x12, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x1f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49,
	0x46, 0x49, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x51,
	0x55, 0x41, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x51, 0x55, 0x41, 0x4e,
	0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x41, 0x4e, 0x59, 0x10, 0x02, 0x2a, 0x4e, 0x0a, 0x0f, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x41, 0x54, 0x54,
	0x45, 0x52, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41,
	0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4c,
	0x49, 0x4b, 0x45, 0x10, 0x01, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6e, 0x72, 0x2d, 0x69, 0x6f, 0x2f, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2f, 0x75, 0x63, 0x61, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31,
	0x3b, 0x75, 0x63, 0x61, 0x6e, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_crypto_ucan_v1_policy_proto_rawDescOnce sync.Once
	file_crypto_ucan_v1_policy_proto_rawDescData = file_crypto_ucan_v1_policy_proto_rawDesc
)

func file_crypto_ucan_v1_policy_proto_rawDescGZIP() []byte {
	file_crypto_ucan_v1_policy_proto_rawDescOnce.Do(func() {
		file_crypto_ucan_v1_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_crypto_ucan_v1_policy_proto_rawDescData)
	})
	return file_crypto_ucan_v1_policy_proto_rawDescData
}

var file_crypto_ucan_v1_policy_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_crypto_ucan_v1_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_crypto_ucan_v1_policy_proto_goTypes = []interface{}{
	(ComparisonOperator)(0),     // 0: crypto.ucan.v1.ComparisonOperator
	(ConnectiveOperator)(0),     // 1: crypto.ucan.v1.ConnectiveOperator
	(QuantifierOperator)(0),     // 2: crypto.ucan.v1.QuantifierOperator
	(PatternOperator)(0),        // 3: crypto.ucan.v1.PatternOperator
	(*PolicyStatement)(nil),     // 4: crypto.ucan.v1.PolicyStatement
	(*ComparisonStatement)(nil), // 5: crypto.ucan.v1.ComparisonStatement
	(*ConnectiveStatement)(nil), // 6: crypto.ucan.v1.ConnectiveStatement
	(*NegationStatement)(nil),   // 7: crypto.ucan.v1.NegationStatement
	(*QuantifierStatement)(nil), // 8: crypto.ucan.v1.QuantifierStatement
	(*PatternStatement)(nil),    // 9: crypto.ucan.v1.PatternStatement
	(*structpb.Value)(nil),      // 10: google.protobuf.Value
}
var file_crypto_ucan_v1_policy_proto_depIdxs = []int32{
	5,  // 0: crypto.ucan.v1.PolicyStatement.comparison:type_name -> crypto.ucan.v1.ComparisonStatement
	6,  // 1: crypto.ucan.v1.PolicyStatement.connective:type_name -> crypto.ucan.v1.ConnectiveStatement
	7,  // 2: crypto.ucan.v1.PolicyStatement.negation:type_name -> crypto.ucan.v1.NegationStatement
	8,  // 3: crypto.ucan.v1.PolicyStatement.quantifier:type_name -> crypto.ucan.v1.QuantifierStatement
	9,  // 4: crypto.ucan.v1.PolicyStatement.pattern:type_name -> crypto.ucan.v1.PatternStatement
	0,  // 5: crypto.ucan.v1.ComparisonStatement.operator:type_name -> crypto.ucan.v1.ComparisonOperator
	10, // 6: crypto.ucan.v1.ComparisonStatement.value:type_name -> google.protobuf.Value
	1,  // 7: crypto.ucan.v1.ConnectiveStatement.operator:type_name -> crypto.ucan.v1.ConnectiveOperator
	4,  // 8: crypto.ucan.v1.ConnectiveStatement.statements:type_name -> crypto.ucan.v1.PolicyStatement
	4,  // 9: crypto.ucan.v1.NegationStatement.statement:type_name -> crypto.ucan.v1.PolicyStatement
	2,  // 10: crypto.ucan.v1.QuantifierStatement.operator:type_name -> crypto.ucan.v1.QuantifierOperator
	4,  // 11: crypto.ucan.v1.QuantifierStatement.statement:type_name -> crypto.ucan.v1.PolicyStatement
	3,  // 12: crypto.ucan.v1.PatternStatement.operator:type_name -> crypto.ucan.v1.PatternOperator
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_crypto_ucan_v1_policy_proto_init() }
func file_crypto_ucan_v1_policy_proto_init() {
	if File_crypto_ucan_v1_policy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_crypto_ucan_v1_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_ucan_v1_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComparisonStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_ucan_v1_policy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectiveStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_ucan_v1_policy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NegationStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_ucan_v1_policy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuantifierStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_ucan_v1_policy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_crypto_ucan_v1_policy_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*PolicyStatement_Comparison)(nil),
		(*PolicyStatement_Connective)(nil),
		(*PolicyStatement_Negation)(nil),
		(*PolicyStatement_Quantifier)(nil),
		(*PolicyStatement_Pattern)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_crypto_ucan_v1_policy_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_crypto_ucan_v1_policy_proto_goTypes,
		DependencyIndexes: file_crypto_ucan_v1_policy_proto_depIdxs,
		EnumInfos:         file_crypto_ucan_v1_policy_proto_enumTypes,
		MessageInfos:      file_crypto_ucan_v1_policy_proto_msgTypes,
	}.Build()
	File_crypto_ucan_v1_policy_proto = out.File
	file_crypto_ucan_v1_policy_proto_rawDesc = nil
	file_crypto_ucan_v1_policy_proto_goTypes = nil
	file_crypto_ucan_v1_policy_proto_depIdxs = nil
}
